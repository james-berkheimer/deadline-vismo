
//this function is used to remap all file textures that include tokens. It is currently being used to fix an issue with the dirmap command.
global proc remapFileTextures()
{
	python( "import maya.app.general.fileTexturePathResolver" );
	string $fileNodes[] = `ls -type file`;
	
	for( $fileNode in $fileNodes )
	{
		string $fileAttr = $fileNode + ".fileTextureName";
		string $curFile = `getAttr $fileAttr`;
		string $mappedFile = `dirmap -cd $curFile`;
		if( $mappedFile != $curFile )
		{
			string $resolvedFiles[] = `python( "maya.app.general.fileTexturePathResolver.findAllFilesForPattern('" + $mappedFile + "', None)" )`;
			if( size( $resolvedFiles ) >0 )
			{
				print( "Changing "+$fileAttr+ " from " + $curFile + " to " + $mappedFile+"\n" );
				setAttr -type "string" $fileAttr $mappedFile;
			}
		}
	}
}

proc mapXgenAttributes(string $palette, string $description, string $object, string $deadlineMappings[] ) 
{

	string $attributes[] = python("xg.attrs( \"" + $palette + "\", \"" + $description + "\", \"" + $object + "\" )");

	 for ($attribute in $attributes)
	{
		string $attrVal = python("xg.getAttr( \"" + $attribute + "\",\"" + $palette + "\", \"" + $description + "\", \"" + $object + "\" )");
		$attrVal = substituteAllString($attrVal, "\\", "/");
		string $newAttrVal = $attrVal;
		for( $i = 0; $i < size($deadlineMappings); $i += 2 )
		{
			 $newAttrVal = substituteAllString($newAttrVal, $deadlineMappings[ $i ], $deadlineMappings[ $i + 1 ] );
		}

		if ( $newAttrVal != $attrVal )
		{
			string $escapedNewAttrVal = substituteAllString($newAttrVal, "\"", "\\\"");

			string $command = "xg.setAttr( \"" + $attribute + "\",\"" + $escapedNewAttrVal + "\",\"" + $palette + "\", \"" + $description + "\", \"" + $object + "\" )";

			python($command);
			print ( "Changing "+$attrVal + "\n" );
			print ( "\nTo "+$newAttrVal + "\n" );
		}
	}
}

global proc mapXGen( string $deadlineMappings[] ) 
{
	catchQuiet ( python("import xgenm as xg") );
	string $palettes[];

	clear $palettes;
	catchQuiet ( $palettes = python("xg.palettes()") );
	if ( `size $palettes` == 0 )
		return;

	string $descriptions[];
	string $objects[];
	for ( $palette in $palettes )
	{
		mapXgenAttributes($palette, "", "", $deadlineMappings);
		clear $descriptions;
		$descriptions = python("xg.descriptions( \"" + $palette + "\" )");
		for ( $description in $descriptions )
		{
			mapXgenAttributes($palette, $description, "", $deadlineMappings);
			clear $objects;
			$objects = python("xg.objects( \"" + $palette + "\", \"" + $description + "\" )");
			for ( $object in $objects )
			{
				mapXgenAttributes($palette, $description, $object, $deadlineMappings);
			}
		}
	}
}